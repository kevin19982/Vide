)
),
tabPanel(
title = "w"
)
)
server <- function(input, output) {
rv <- reactiveValues()
observe({
#rv$streamer <- data %>% group_by(input$streamer_choice)
rv$name <- input$streamer_choice
})
output$line_plot <- renderPlotly({
make_plot(data, rv$name)
})
}
shinyApp(ui, server)
# make_plot_2 <- function(channel_name, data = data){
#
#   ggplot(data, aes(x = date, y=as.numeric(points), group=user, colour=user)) +
#     geom_point() +
#     geom_line() +
#     labs(title = paste0("Streamer: ", channel_name), y = "Kanalpunkte", x = "Datum")
#
# }
#
# ui_2 <- fluidPage(
#   fluidRow(plotOutput("rosh_1")),
#   fluidRow(plotOutput("deuce_1")),
#   fluidRow(plotOutput("vondice_1")),
#   fluidRow(plotOutput("dimes_1")),
#   fluidRow(plotOutput("yassuo_1")),
#   fluidRow(tableOutput("datatable"))
# )
#
# server_2 <- function(input, output, session) {
#   output$rosh_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "roshtein")
#     make_plot("roshtein", data = grouped_by_channel)
#   })
#   output$deuce_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "deuceace")
#     make_plot("deuceace", data = grouped_by_channel)
#   })
#   output$vondice_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "vondice")
#     make_plot("vondice", data = grouped_by_channel)
#   })
#   output$dimes_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "frankdimes")
#     make_plot("frankdimes", data = grouped_by_channel)
#   })
#   output$yassuo_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "yassuo")
#     make_plot("yassuo", data = grouped_by_channel)
#   })
#   output$datatable <- renderTable(data)
# }
#
#
# shinyApp(ui, server)
#
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
make_plot <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data_sub, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~user, mode="lines+marker")
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Summary",
sidebarLayout(
sidebarPanel(
width = 12,
h1("Select Streamer"),
shiny::selectInput(
inputId = "streamer_choice",
choices = unique(data$channel)
)
),
mainPanel(
h1 = "Lineplot",
width = 12,
plotlyOutput("line_plot")
)
)
),
tabPanel(
title = "w"
)
)
server <- function(input, output) {
rv <- reactiveValues()
observe({
#rv$streamer <- data %>% group_by(input$streamer_choice)
rv$name <- input$streamer_choice
})
output$line_plot <- renderPlotly({
make_plot(data, rv$name)
})
}
shinyApp(ui, server)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
make_plot <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data_sub, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~user, mode="lines+marker")
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Summary",
sidebarLayout(
sidebarPanel(
width = 12,
h1("Select Streamer"),
shiny::selectInput(
inputId = "streamer_choice",
label = "",
choices = unique(data$channel)
)
),
mainPanel(
h1 = "Lineplot",
width = 12,
plotlyOutput("line_plot")
)
)
),
tabPanel(
title = "w"
)
)
server <- function(input, output) {
rv <- reactiveValues()
observe({
#rv$streamer <- data %>% group_by(input$streamer_choice)
rv$name <- input$streamer_choice
})
output$line_plot <- renderPlotly({
make_plot(data, rv$name)
})
}
shinyApp(ui, server)
# shiny testing
library(readr)
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(bslib)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
#data <- read_csv("/home/shiny/streamelements_data.csv", col_types = cols(.default = "c"))
make_plot <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data_sub, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~user, mode="lines+marker")
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 4, bootswatch = "minty"),
tabPanel(
title = "Summary",
sidebarPanel(
width = 12,
h1("Select Streamer"),
shiny::selectInput(
inputId = "streamer_choice",
label = "",
choices = unique(data$channel)
)
),
mainPanel(
h1 = "Lineplot",
width = 12,
plotlyOutput("line_plot")
)
),
tabPanel(
title = "w"
)
)
server <- function(input, output) {
rv <- reactiveValues()
observe({
#rv$streamer <- data %>% group_by(input$streamer_choice)
rv$name <- input$streamer_choice
})
output$line_plot <- renderPlotly({
make_plot(data, rv$name)
})
}
shinyApp(ui, server)
# make_plot_2 <- function(channel_name, data = data){
#
#   ggplot(data, aes(x = date, y=as.numeric(points), group=user, colour=user)) +
#     geom_point() +
#     geom_line() +
#     labs(title = paste0("Streamer: ", channel_name), y = "Kanalpunkte", x = "Datum")
#
# }
#
# ui_2 <- fluidPage(
#   fluidRow(plotOutput("rosh_1")),
#   fluidRow(plotOutput("deuce_1")),
#   fluidRow(plotOutput("vondice_1")),
#   fluidRow(plotOutput("dimes_1")),
#   fluidRow(plotOutput("yassuo_1")),
#   fluidRow(tableOutput("datatable"))
# )
#
# server_2 <- function(input, output, session) {
#   output$rosh_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "roshtein")
#     make_plot("roshtein", data = grouped_by_channel)
#   })
#   output$deuce_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "deuceace")
#     make_plot("deuceace", data = grouped_by_channel)
#   })
#   output$vondice_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "vondice")
#     make_plot("vondice", data = grouped_by_channel)
#   })
#   output$dimes_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "frankdimes")
#     make_plot("frankdimes", data = grouped_by_channel)
#   })
#   output$yassuo_1 <- renderPlot({
#     grouped_by_channel <- data %>% group_by(channel) %>% subset(channel == "yassuo")
#     make_plot("yassuo", data = grouped_by_channel)
#   })
#   output$datatable <- renderTable(data)
# }
#
#
# shinyApp(ui, server)
#
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
library(shiny); runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
make_plot <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~channel, mode="lines+marker")
}
data_with <- data %>% group_by(channel) %>% select(user == "roshtein")
data_with <- data %>% group_by(channel) %>% select(user == "roshtein")
data_without <- data %>% group_by(channel) %>% select(user == "roshtein")
# shiny testing
library(readr)
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(bslib)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
data_with <- data %>% group_by(channel) %>% select(user == "roshtein")
data_without <- data %>% group_by(channel) %>% select(user == "roshtein")
View(data)
data_with <- data %>% group_by(channel) %>% select(user == "alfredo4200")
data_without <- data %>% group_by(channel) %>% select(user == "alfredo4200")
names(data$user)
unique(data$user)
data_with <- data %>% group_by(channel) %>% select(user == unique(data$user)[1])
data_with <- data %>% group_by(channel) %>% select(user = unique(data$user)[1])
data_with <- data %>% group_by(channel) %>% select(user == unique(data$user)[1])
data_with <- data %>% group_by(channel) %>% select(channel == "roshtein")
View(data)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
#data <- read_csv("/home/shiny/streamelements_data.csv", col_types = cols(.default = "c"))
sapply(data, class)
data$channel <- toString(data$channel)
sapply(data, class)
data$points <- toString(data$points)
sapply(data, class)
data$points <- as.numeric(data$points)
data$points <- as.numeric(data$points)
sapply(data, class)
data$points <- as.string(data$points)
data$points <- as.factor(data$points)
sapply(data, class)
rosh <- "roshtein"
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
rosh <- "roshtein"
data_with <- data %>% group_by(channel) %>% select(channel == rosh)
data_without <-group_by(data, channel) %>% select(user == "alfredo4200")
library(dplyr)
library(shiny); runApp('~/R/Streamelements/shiny_test.R')
library(readr)
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(bslib)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
#data <- read_csv("/home/shiny/streamelements_data.csv", col_types = cols(.default = "c"))
rosh <- "roshtein"
data_with <- data %>% group_by(channel) %>% select(data$channel == rosh)
data_with <- data %>% group_by(channel) %>% select(data$channel = rosh)
# package for pipe?
data_without <-group_by(data, channel) %>% select(user == "alfredo4200")
# shiny testing
library(readr)
library(dplyr)
library(shiny)
library(ggplot2)
library(plotly)
library(bslib)
library(magrittr)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
rosh <- "roshtein"
data_with <- data %>% group_by(channel) %>% select(data$channel = rosh)
data_with <- data %>% group_by(channel) %>% select(data$channel == rosh)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
rosh <- "roshtein"
data_with <- data %>% select(data$channel == rosh)
data_with <- data %>% select(data$channel == "roshtein")
data_with <- data %>% select(channel == "roshtein")
View(data)
data_with <- select(data, channel == "roshtein")
View(data)
# package for pipe?
data_without <-group_by(data, channel) %>% select(user == "alfredo4200")
data_with <- select(data, channel == "roshtein")
make_plot_channel(df, "deuceace")
make_plot_channel <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data_sub, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~user, mode="lines+marker")
}
make_plot_channel(df, "deuceace")
data_with <- data %>% group_by(channel) %>% subset(channel == rosh)
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
data_with <- data %>% group_by(channel) %>% subset(channel == "roshtein")
# package for pipe?
data_without <- data %>% select(channel == "alfredo4200")
# package for pipe?
data_without <- data %>% subset(channel == "alfredo4200")
data <- read_csv("C:/Users/felix/Documents/R/Streamelements/data/streamelements_data.csv", col_types = cols(.default = "c"))
data_with <- data %>% group_by(channel) %>% subset(channel == "roshtein")
# package for pipe?
data_without <- data %>% subset(channel == "alfredo4200")
# package for pipe?
data_without <- data %>% subset(channel == "roshtein")
View(data_with)
View(data_without)
make_plot_channel(df, "roshtein")
make_plot_channel <- function(df, channel_name){
data_sub <- data %>% group_by(channel) %>% subset(channel == channel_name)
plot_ly(data = data_sub, x = ~date, y =  ~as.numeric(points),
group = ~channel, type = "scatter",
color = ~user, mode="lines+marker")
}
make_plot_user <- function(df, user_name){
data_sub <- data %>% group_by(channel) %>% subset(user == user_name)
plot_ly(data = data_sub, x = ~date, y = ~as.numeric(points),
type = "scatter", mode = "lines+marker")
}
make_plot_channel(df, "roshtein")
make_plot_user(df, "alfredo4200")
make_plot_user <- function(df, user_name){
data_sub <- data %>% group_by(channel) %>% subset(user == user_name)
plot_ly(data = data_sub, x = ~date, y = ~as.numeric(points), color = ~channel,
type = "scatter", mode = "lines+marker")
}
make_plot_user(df, "alfredo4200")
make_plot_user <- function(df, user_name){
data_sub <- data %>% group_by(channel) %>% subset(user == user_name)
plot_ly(data = data_sub, x = ~date, y = ~as.numeric(points), colour = ~channel,
type = "scatter", mode = "lines+marker")
}
make_plot_user(df, "alfredo4200")
make_plot_user <- function(df, user_name){
data_sub <- data %>% group_by(channel) %>% subset(user == user_name)
plot_ly(data = data_sub, x = ~date, y = ~as.numeric(points), color = ~channel,
type = "scatter", mode = "lines+marker")
}
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
library(shiny); runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
runApp('~/R/Streamelements/shiny_test.R')
# grepolife
library(rvest)
library(ggplot2)
library(xml2)
library(dplyr)
url <- "https://grepolife.com/de/130"
html_data <- read_html(x = url)
data <- html_elements(html_data, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "new-table-wrapper", " " )) and (((count(preceding-sibling::*) + 1) = 1) and parent::*)]//*[contains(concat( " ", @class, " " ), concat( " ", "center", " " )) and (((count(preceding-sibling::*) + 1) = 1) and parent::*)] | //*[contains(concat( " ", @class, " " ), concat( " ", "new-table-wrapper", " " )) and (((count(preceding-sibling::*) + 1) = 1) and parent::*)]//a')
data_table <- html_text(data)
data_table
url <- "https://grepolife.com/de/130"
html_data <- read_html(x = url)
data <- html_elements(html_data, xpath='//*[(@id = "rating_alplace")]//*[contains(concat( " ", @class, " " ), concat( " ", "player", " " ))]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, css='#rating_alplace .player')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[@id="rating_alplace"]/table/tbody/tr[1]/td[3]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[@id="rating_alplace"]/table/tbody/tr[1]/td[3]')
url <- "https://grepolife.com/de/130"
html_data <- read_html(x = url)
data <- html_elements(html_data, xpath='//*[@id="rating_alplace"]/table/tbody/tr[1]/td[3]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='/html/body/div[12]/div[2]/div[5]/div/div[3]/table/tbody/tr[1]/td[3]')
data_table <- html_text(data)
data_table
library(rvest)
library(ggplot2)
library(xml2)
library(dplyr)
url <- "https://grepolife.com/de/130"
html_data <- read_html(x = url)
data <- html_elements(html_data, xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "littlewin-container", " " ))]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[(@id = "alliances-rating")]//*[contains(concat( " ", @class, " " ), concat( " ", "littlewin-container", " " ))]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[(@id = "rating_alplace")]//td | //tr[(((count(preceding-sibling::*) + 1) = 1) and parent::*)]//*[contains(concat( " ", @class, " " ), concat( " ", "player", " " ))]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[(@id = "rating_alplace")]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='//*[@id="rating_alplace"]/table/tbody/tr[1]/td[3]')
data_table <- html_text(data)
data_table
data <- html_elements(html_data, xpath='/html/body/div[12]/div[2]/div[5]/div/div[3]/table')
data_table <- html_text(data)
data_table
library(httr)
library(jsonlite)
library(dplyr)
library(readr)
url <- "https://data.sec.gov/api/xbrl/frames/us-gaap/AccountsPayableCurrent/USD/CY2019Q1I.json"
Sys.sleep(1)
api_request <- GET(url)
View(api_request)
api_request <- GET(url)$content %>% rawToChar() %>% fromJSON(flatten=T)
api_request <- GET(url)$content
api_request <- GET(url)$content %>% rawToChar()
print(api_request)
api_request <- GET(url)
print(api_request)
View(api_request)
submission <- "https://data.sec.gov/submissions/CIK0002028724.json"
Sys.sleep(1)
api_request <- GET(submissions_url)
print(api_request)
View(api_request)
api_request <- GET(submissions_url)$content
api_request <- GET(submission)$content
api_further <- api_request
print(api_further)
api_further <- api_request %>% rawToChar()
print(api_further)
info <- GET("https://www.sec.gov/files/company_tickers.json")
info <- rbindlist(info)
library(data.table)
info <- rbindlist(info)
info <- GET("https://www.sec.gov/files/company_tickers.json")$content
info <- rbindlist(info)
info <- read_json("https://www.sec.gov/files/company_tickers.json")
info <- rbindlist(info)
info
View(info)
amazon_url <- "https://data.sec.gov/api/xbrl/companyfacts/CIK0001018724.json"
amazon <- read_json(amazon_url)
# variables
user_agent <- "Felix Froschauer felix.froschauer@gmx.de"
amazon_url <- "https://data.sec.gov/api/xbrl/companyfacts/CIK0001018724.json"
amazon <- read_json(amazon_url,
config = httr::add_headers(
"User-Agenet" = user_agent,
"Accept-Encoding" = "gzip", "deflate"))
getwd()
# set working directory
setwd("C:\Users\felix\Documents\git\Vide")
# set working directory
setwd("/Users/felix/Documents/git/Vide")
# get all annual reports for all companies and years listed below
# importing libraries
library(httr)
library(jsonlite)
library(dplyr)
library(readr)
library(data.table)
library(stringr)
library(readr)
library(xml2)
library(rjson)
# api package
library(edgar)
company_codes_all <- read_json("https://www.sec.gov/files/company_tickers.json") %>% rbindlist() # API request to get the company codes
write.csv(company_codes_all, "data/company_codes_all", row.names = FALSE) # for late use
write.csv(company_codes_all, "data/company_codes_all.csv", row.names = FALSE) # for late use
